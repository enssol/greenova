{"version":3,"file":"foldable.bundle.js","mappings":"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","sources":["webpack://Greenova/webpack/universalModuleDefinition","webpack://Greenova/webpack/bootstrap","webpack://Greenova/webpack/runtime/define property getters","webpack://Greenova/webpack/runtime/hasOwnProperty shorthand","webpack://Greenova/webpack/runtime/make namespace object","webpack://Greenova/./greenova/static/ts/src/modules/foldable.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Greenova\"] = factory();\n\telse\n\t\troot[\"Greenova\"] = root[\"Greenova\"] || {}, root[\"Greenova\"][\"foldable\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Foldable Component TypeScript Implementation\n *\n * This module provides collapsible/expandable UI elements with progressive enhancement\n * and leverages AssemblyScript for performance-critical animation calculations.\n */\n\nimport { GreenovaWasmModule } from '../utils/wasm-loader';\n\n/**\n * Configuration interfaces\n */\ninterface FoldableSelectors {\n  foldable: string;\n  trigger: string;\n  content: string;\n  expanded: string;\n}\n\ninterface FoldableClasses {\n  hidden: string;\n  expanded: string;\n  collapsed: string;\n  animating: string;\n}\n\ninterface FoldableAttributes {\n  expanded: string;\n  animationDuration: string;\n}\n\n/**\n * Foldable component implementation\n */\nexport class Foldable {\n  private wasmModule: GreenovaWasmModule;\n  private selectors: FoldableSelectors;\n  private classes: FoldableClasses;\n  private attrs: FoldableAttributes;\n\n  constructor(wasmModule: GreenovaWasmModule) {\n    this.wasmModule = wasmModule;\n\n    // Configuration\n    this.selectors = {\n      foldable: '[data-foldable]',\n      trigger: '[data-foldable-trigger]',\n      content: '[data-foldable-content]',\n      expanded: '[data-foldable-expanded=\"true\"]',\n    };\n\n    this.classes = {\n      hidden: 'hidden',\n      expanded: 'expanded',\n      collapsed: 'collapsed',\n      animating: 'animating',\n    };\n\n    this.attrs = {\n      expanded: 'data-foldable-expanded',\n      animationDuration: 'data-animation-duration',\n    };\n  }\n\n  /**\n   * Initialize foldable components\n   */\n  public init(): void {\n    // Skip initialization if hyperscript is handling foldables\n    if (typeof (window as any)._hyperscript !== 'undefined') {\n      // Hyperscript takes precedence - only initialize elements not handled by hyperscript\n      const foldables = document.querySelectorAll(\n        `${this.selectors.foldable}:not([_])`\n      );\n      this.initElements(foldables);\n    } else {\n      // No hyperscript, initialize all foldables\n      const foldables = document.querySelectorAll(this.selectors.foldable);\n      this.initElements(foldables);\n    }\n\n    this.setupMutationObserver();\n    this.setupHtmxHandlers();\n  }\n\n  /**\n   * Initialize a collection of foldable elements\n   * @param elements Collection of foldable elements\n   */\n  private initElements(elements: NodeListOf<Element>): void {\n    elements.forEach((foldable) => {\n      // Skip if already initialized\n      if (foldable.hasAttribute('data-foldable-initialized')) {\n        return;\n      }\n\n      // Find trigger and content elements\n      const trigger = foldable.querySelector(this.selectors.trigger);\n      const content = foldable.querySelector(this.selectors.content);\n\n      // Skip if missing required elements\n      if (!trigger || !content) {\n        console.warn('Foldable missing trigger or content:', foldable);\n        return;\n      }\n\n      // Set initial state\n      const isExpanded =\n        foldable.hasAttribute(this.attrs.expanded) &&\n        foldable.getAttribute(this.attrs.expanded) === 'true';\n\n      // Set ARIA attributes for accessibility\n      trigger.setAttribute('aria-expanded', isExpanded ? 'true' : 'false');\n      trigger.setAttribute('aria-controls', this.ensureId(content));\n\n      // Set initial visibility\n      if (!isExpanded) {\n        content.classList.add(this.classes.hidden);\n      }\n\n      // Add event listener to trigger\n      trigger.addEventListener('click', (event) => {\n        event.preventDefault();\n        this.toggleFoldable(foldable);\n      });\n\n      // Mark as initialized\n      foldable.setAttribute('data-foldable-initialized', 'true');\n    });\n  }\n\n  /**\n   * Toggle foldable element state\n   * @param foldable The foldable container element\n   */\n  private toggleFoldable(foldable: Element): void {\n    const trigger = foldable.querySelector(\n      this.selectors.trigger\n    ) as HTMLElement;\n    const content = foldable.querySelector(\n      this.selectors.content\n    ) as HTMLElement;\n\n    // Don't toggle if currently animating\n    if (content.classList.contains(this.classes.animating)) {\n      return;\n    }\n\n    // Get current state\n    const isExpanded = trigger.getAttribute('aria-expanded') === 'true';\n\n    // Update ARIA states\n    trigger.setAttribute('aria-expanded', !isExpanded ? 'true' : 'false');\n\n    // Toggle classes with animation using AssemblyScript for calculations\n    if (isExpanded) {\n      // Collapse animation\n      this.animateCollapse(foldable, content);\n    } else {\n      // Expand animation\n      this.animateExpand(foldable, content);\n    }\n  }\n\n  /**\n   * Animate collapse of content\n   * @param foldable The foldable container element\n   * @param content The content element to collapse\n   */\n  private animateCollapse(foldable: Element, content: HTMLElement): void {\n    // Set initial height to current height\n    content.style.height = `${content.scrollHeight}px`;\n\n    // Force reflow\n    content.offsetHeight; // eslint-disable-line @typescript-eslint/no-unused-expressions\n\n    content.classList.add(this.classes.animating);\n    content.style.height = '0';\n\n    // Get animation duration\n    const duration = parseInt(\n      foldable.getAttribute(this.attrs.animationDuration) || '300',\n      10\n    );\n\n    // Use setTimeout to handle animation completion\n    setTimeout(() => {\n      content.classList.add(this.classes.hidden);\n      content.classList.remove(this.classes.animating);\n      content.style.height = '';\n\n      // Update data attribute for state persistence\n      foldable.setAttribute(this.attrs.expanded, 'false');\n\n      // Dispatch custom event\n      foldable.dispatchEvent(\n        new CustomEvent('foldable:collapsed', {\n          bubbles: true,\n          detail: { foldable },\n        })\n      );\n    }, duration);\n  }\n\n  /**\n   * Animate expand of content\n   * @param foldable The foldable container element\n   * @param content The content element to expand\n   */\n  private animateExpand(foldable: Element, content: HTMLElement): void {\n    // Remove hidden class first\n    content.classList.remove(this.classes.hidden);\n\n    // Measure final height\n    const height = content.scrollHeight;\n\n    // Start collapsed\n    content.style.height = '0';\n\n    // Force reflow\n    content.offsetHeight; // eslint-disable-line @typescript-eslint/no-unused-expressions\n\n    // Begin transition\n    content.classList.add(this.classes.animating);\n    content.style.height = `${height}px`;\n\n    // Get animation duration\n    const duration = parseInt(\n      foldable.getAttribute(this.attrs.animationDuration) || '300',\n      10\n    );\n\n    // Use WASM to calculate animation duration\n    const easedDuration = this.wasmModule.easeInOutEasing(duration, duration);\n\n    // Use setTimeout to handle animation completion\n    setTimeout(() => {\n      content.classList.remove(this.classes.animating);\n      content.style.height = '';\n\n      // Update data attribute for state persistency\n      foldable.setAttribute(this.attrs.expanded, 'true');\n\n      // Dispatch custom event\n      foldable.dispatchEvent(\n        new CustomEvent('foldable:expanded', {\n          bubbles: true,\n          detail: { foldable },\n        })\n      );\n    }, easedDuration);\n  }\n\n  /**\n   * Ensure an element has an ID, generating one if needed\n   * @param element Element to ensure ID for\n   * @returns The element's ID\n   */\n  private ensureId(element: Element): string {\n    if (!element.id) {\n      element.id = `foldable-content-${Math.random().toString(36).substr(2, 9)}`;\n    }\n    return element.id;\n  }\n\n  /**\n   * Handle content that's added dynamically via AJAX/HTMX\n   */\n  private setupMutationObserver(): void {\n    // Skip if not supported\n    if (!window.MutationObserver) {\n      return;\n    }\n\n    const observer = new MutationObserver((mutations) => {\n      let needsCheck = false;\n\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          needsCheck = true;\n        }\n      });\n\n      if (needsCheck) {\n        this.init();\n      }\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  /**\n   * Setup HTMX content swap handlers\n   */\n  private setupHtmxHandlers(): void {\n    document.addEventListener('htmx:afterSwap', () => {\n      this.init();\n    });\n  }\n\n  /**\n   * Toggle a foldable element\n   * @param element Element within a foldable component\n   */\n  public toggle(element: Element): void {\n    const foldable = element.closest(this.selectors.foldable);\n    if (foldable) {\n      this.toggleFoldable(foldable);\n    }\n  }\n\n  /**\n   * Expand a foldable element\n   * @param element Element within a foldable component\n   */\n  public expand(element: Element): void {\n    const foldable = element.closest(this.selectors.foldable);\n    if (foldable) {\n      const trigger = foldable.querySelector(\n        this.selectors.trigger\n      ) as HTMLElement;\n      if (trigger && trigger.getAttribute('aria-expanded') === 'false') {\n        this.toggleFoldable(foldable);\n      }\n    }\n  }\n\n  /**\n   * Collapse a foldable element\n   * @param element Element within a foldable component\n   */\n  public collapse(element: Element): void {\n    const foldable = element.closest(this.selectors.foldable);\n    if (foldable) {\n      const trigger = foldable.querySelector(\n        this.selectors.trigger\n      ) as HTMLElement;\n      if (trigger && trigger.getAttribute('aria-expanded') === 'true') {\n        this.toggleFoldable(foldable);\n      }\n    }\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Foldable","constructor","wasmModule","this","selectors","foldable","trigger","content","expanded","classes","hidden","collapsed","animating","attrs","animationDuration","init","window","_hyperscript","foldables","document","querySelectorAll","initElements","setupMutationObserver","setupHtmxHandlers","elements","forEach","hasAttribute","querySelector","console","warn","isExpanded","getAttribute","setAttribute","ensureId","classList","add","addEventListener","event","preventDefault","toggleFoldable","contains","animateCollapse","animateExpand","style","height","scrollHeight","offsetHeight","duration","parseInt","setTimeout","remove","dispatchEvent","CustomEvent","bubbles","detail","easedDuration","easeInOutEasing","element","id","Math","random","toString","substr","MutationObserver","mutations","needsCheck","mutation","type","addedNodes","length","observe","body","childList","subtree","toggle","closest","expand","collapse"],"sourceRoot":""}
