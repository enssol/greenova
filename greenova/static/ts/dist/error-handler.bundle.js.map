{"version":3,"file":"error-handler.bundle.js","mappings":"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","sources":["webpack://Greenova/webpack/universalModuleDefinition","webpack://Greenova/webpack/bootstrap","webpack://Greenova/webpack/runtime/define property getters","webpack://Greenova/webpack/runtime/hasOwnProperty shorthand","webpack://Greenova/webpack/runtime/make namespace object","webpack://Greenova/./greenova/static/ts/src/modules/error-handler.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Greenova\"] = factory();\n\telse\n\t\troot[\"Greenova\"] = root[\"Greenova\"] || {}, root[\"Greenova\"][\"error-handler\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Greenova TypeScript Error Handler\n *\n * This module provides centralized error handling for TypeScript applications,\n * leveraging the AssemblyScript WASM module for critical error processing.\n */\n\nimport { GreenovaWasmModule } from '../utils/wasm-loader';\n\n/**\n * Error details interface\n */\ninterface ErrorDetail {\n  message: string;\n  type: string;\n  url: string;\n  timestamp: string;\n  userAgent: string;\n  stack?: string;\n  context?: Record<string, unknown>;\n  status?: number;\n  [key: string]: unknown;\n}\n\n/**\n * Error Handler class\n */\nexport class ErrorHandler {\n  private wasmModule: GreenovaWasmModule;\n\n  constructor(wasmModule: GreenovaWasmModule) {\n    this.wasmModule = wasmModule;\n  }\n\n  /**\n   * Initialize the error handler\n   */\n  public init(): void {\n    this.setupGlobalHandlers();\n  }\n\n  /**\n   * Setup global error handlers\n   */\n  private setupGlobalHandlers(): void {\n    // Global error handler to catch unhandled exceptions\n    window.addEventListener('error', (event: ErrorEvent) => {\n      this.handleError({\n        type: 'unhandled',\n        message: event.error?.message || 'Unknown error',\n        source: event.filename || 'unknown',\n        lineno: event.lineno,\n        stack: event.error?.stack,\n      });\n      return true;\n    });\n\n    // Promise rejection handler for unhandled promise rejections\n    window.addEventListener(\n      'unhandledrejection',\n      (event: PromiseRejectionEvent) => {\n        this.handleError({\n          type: 'promise',\n          message: event.reason?.message || 'Unhandled promise rejection',\n          stack: event.reason?.stack,\n        });\n      }\n    );\n\n    // HTMX specific error handler for request failures\n    document.body.addEventListener('htmx:responseError', (event: Event) => {\n      const htmxEvent = event as CustomEvent;\n      const response = htmxEvent.detail.xhr;\n\n      this.handleError({\n        type: 'htmx',\n        status: response.status,\n        url: htmxEvent.detail.requestConfig.path,\n        message: `HTMX request failed with status ${response.status}`,\n      });\n\n      // For 5xx errors, show a user-friendly message in the target\n      if (response.status >= 500) {\n        const target = htmxEvent.detail.target as HTMLElement;\n        if (target) {\n          target.innerHTML = `\n            <div class=\"notice error\" role=\"alert\">\n              <p>Sorry, something went wrong with this request. Please try again.</p>\n            </div>\n          `;\n        }\n      }\n    });\n  }\n\n  /**\n   * Handle an error by logging it and optionally sending to server\n   * @param errorInfo Error information\n   */\n  private handleError(errorInfo: Record<string, unknown>): void {\n    // Log to console for debugging\n    console.error('[Greenova Error]', errorInfo);\n\n    // Record error in WASM module\n    this.wasmModule.recordError(\n      this.wasmModule.ERROR_GENERAL,\n      (errorInfo.status as number) || 0\n    );\n\n    // Create a standardized error object\n    const errorData: ErrorDetail = {\n      message: (errorInfo.message as string) || 'Unknown error',\n      type: (errorInfo.type as string) || 'general',\n      url: window.location.href,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      ...errorInfo,\n    };\n\n    // If we have a viable error and are in production mode, send to server\n    if (errorInfo.message && !this.isLocalDevelopment()) {\n      this.sendErrorToServer(errorData);\n    }\n  }\n\n  /**\n   * Send error data to server for logging\n   * @param errorData Error information to send\n   */\n  private sendErrorToServer(errorData: ErrorDetail): void {\n    // Use a simple fetch with keep-alive: false to ensure error reporting\n    // doesn't hang if the page is being unloaded\n    const blob = new Blob([JSON.stringify(errorData)], {\n      type: 'application/json',\n    });\n\n    // Only attempt to send if navigator.sendBeacon is available\n    if (navigator.sendBeacon) {\n      navigator.sendBeacon('/api/log-client-error/', blob);\n    } else {\n      // Fallback to fetch for older browsers\n      fetch('/api/log-client-error/', {\n        method: 'POST',\n        body: blob,\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-CSRFToken': this.getCSRFToken(),\n        },\n        keepalive: true,\n      }).catch(() => {\n        // Silent catch - we don't want errors in error reporting\n      });\n    }\n  }\n\n  /**\n   * Check if we're in local development mode\n   * @returns True if local development\n   */\n  private isLocalDevelopment(): boolean {\n    const host = window.location.hostname;\n    return host === 'localhost' || host === '127.0.0.1';\n  }\n\n  /**\n   * Get CSRF token from cookies for secure requests\n   * @returns CSRF token\n   */\n  private getCSRFToken(): string {\n    const name = 'csrftoken';\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n      return parts.pop()?.split(';').shift() || '';\n    }\n    return '';\n  }\n\n  /**\n   * Report an error manually\n   * @param error Error object or message\n   * @param context Additional context information\n   */\n  public reportError(\n    error: Error | string,\n    context: Record<string, unknown> = {}\n  ): void {\n    this.handleError({\n      type: 'manual',\n      message: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : null,\n      context: context,\n    });\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ErrorHandler","constructor","wasmModule","this","init","setupGlobalHandlers","window","addEventListener","event","handleError","type","message","error","source","filename","lineno","stack","reason","document","body","htmxEvent","response","detail","xhr","status","url","requestConfig","path","target","innerHTML","errorInfo","console","recordError","ERROR_GENERAL","errorData","location","href","timestamp","Date","toISOString","userAgent","navigator","isLocalDevelopment","sendErrorToServer","blob","Blob","JSON","stringify","sendBeacon","fetch","method","headers","getCSRFToken","keepalive","catch","host","hostname","parts","cookie","split","length","pop","shift","reportError","context","Error","String"],"sourceRoot":""}
