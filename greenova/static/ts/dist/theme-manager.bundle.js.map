{"version":3,"file":"theme-manager.bundle.js","mappings":"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","sources":["webpack://Greenova/webpack/universalModuleDefinition","webpack://Greenova/webpack/bootstrap","webpack://Greenova/webpack/runtime/define property getters","webpack://Greenova/webpack/runtime/hasOwnProperty shorthand","webpack://Greenova/webpack/runtime/make namespace object","webpack://Greenova/./greenova/static/ts/src/modules/theme-manager.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Greenova\"] = factory();\n\telse\n\t\troot[\"Greenova\"] = root[\"Greenova\"] || {}, root[\"Greenova\"][\"theme-manager\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Theme Manager Module\n *\n * This module manages the application's theme system, handling:\n * - Theme switching (light/dark/auto)\n * - System preference detection\n * - Local storage persistence\n * - WASM-based theme calculations\n */\n\nimport { GreenovaWasmModule } from '../utils/wasm-loader';\n\ninterface ThemeConfig {\n  rootAttribute: string;\n  localStorageKey: string;\n  defaultScheme: string;\n}\n\ntype ThemeScheme = 'light' | 'dark' | 'auto';\n\nexport class ThemeManager {\n  private readonly config: ThemeConfig;\n  private readonly mediaQuery: MediaQueryList;\n  private currentTheme: ThemeScheme;\n\n  constructor(private readonly wasmModule: GreenovaWasmModule) {\n    this.config = {\n      rootAttribute: 'data-theme',\n      localStorageKey: 'greenova-theme',\n      defaultScheme: 'auto',\n    };\n    this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    this.currentTheme = this.getStoredTheme();\n  }\n\n  /**\n   * Initialize the theme manager\n   */\n  public init(): void {\n    try {\n      const savedTheme = this.getStoredTheme();\n      this.setThemeInWasm(savedTheme);\n      this.applyTheme(savedTheme);\n      this.setupSystemPreferenceListener();\n      this.setupThemeToggleListeners();\n    } catch (error) {\n      console.error('Theme initialization failed:', error);\n      this.applyThemeWithoutWasm('light');\n    }\n  }\n\n  /**\n   * Apply theme without WASM support\n   */\n  private applyThemeWithoutWasm(theme: ThemeScheme): void {\n    const rootElement = document.documentElement;\n    if (!rootElement) return;\n\n    const effectiveTheme =\n      theme === 'auto'\n        ? this.getSystemPreference()\n          ? 'dark'\n          : 'light'\n        : theme;\n\n    rootElement.setAttribute(this.config.rootAttribute, effectiveTheme);\n    this.currentTheme = theme;\n  }\n\n  /**\n   * Get stored theme preference\n   */\n  private getStoredTheme(): ThemeScheme {\n    try {\n      return (window.localStorage?.getItem(this.config.localStorageKey) ||\n        this.config.defaultScheme) as ThemeScheme;\n    } catch {\n      return this.config.defaultScheme as ThemeScheme;\n    }\n  }\n\n  /**\n   * Set theme in WASM module\n   */\n  private setThemeInWasm(theme: ThemeScheme): void {\n    try {\n      const themeValue = this.getThemeValue(theme);\n      this.wasmModule.setTheme(themeValue);\n    } catch (error) {\n      console.error('Failed to set theme in WASM:', error);\n    }\n  }\n\n  /**\n   * Get theme value for WASM module\n   */\n  private getThemeValue(theme: ThemeScheme): number {\n    switch (theme) {\n      case 'light':\n        return this.wasmModule.THEME_LIGHT;\n      case 'dark':\n        return this.wasmModule.THEME_DARK;\n      case 'auto':\n      default:\n        return this.wasmModule.THEME_AUTO;\n    }\n  }\n\n  /**\n   * Get system color scheme preference\n   */\n  private getSystemPreference(): boolean {\n    return this.mediaQuery?.matches ?? false;\n  }\n\n  /**\n   * Apply theme to document\n   */\n  public applyTheme(theme: ThemeScheme): void {\n    const rootElement = document.documentElement;\n    if (!rootElement) return;\n\n    try {\n      if (theme === 'auto') {\n        const systemPrefersDark = this.getSystemPreference() ? 1 : 0;\n        const resolvedTheme = this.wasmModule.resolveTheme(systemPrefersDark);\n        rootElement.setAttribute(\n          this.config.rootAttribute,\n          resolvedTheme === this.wasmModule.THEME_DARK ? 'dark' : 'light'\n        );\n      } else {\n        rootElement.setAttribute(this.config.rootAttribute, theme);\n      }\n\n      this.currentTheme = theme;\n      this.dispatchThemeChangedEvent(theme);\n    } catch (error) {\n      console.error('Failed to apply theme:', error);\n      this.applyThemeWithoutWasm(theme);\n    }\n  }\n\n  /**\n   * Set up system preference change listener\n   */\n  private setupSystemPreferenceListener(): void {\n    if (!this.mediaQuery?.addEventListener) return;\n\n    this.mediaQuery.addEventListener('change', () => {\n      if (this.currentTheme === 'auto') {\n        this.applyTheme('auto');\n      }\n    });\n  }\n\n  /**\n   * Set up theme toggle button listeners\n   */\n  private setupThemeToggleListeners(): void {\n    document.querySelectorAll('[data-theme-toggle]').forEach((toggle) => {\n      toggle.addEventListener('click', (e) => {\n        e.preventDefault();\n        const targetTheme = (toggle.getAttribute('data-theme-value') ||\n          'auto') as ThemeScheme;\n        this.setTheme(targetTheme);\n      });\n    });\n  }\n\n  /**\n   * Set and save theme preference\n   */\n  public setTheme(theme: ThemeScheme): void {\n    try {\n      window.localStorage?.setItem(this.config.localStorageKey, theme);\n      this.setThemeInWasm(theme);\n      this.applyTheme(theme);\n    } catch (error) {\n      console.error('Failed to set theme:', error);\n      this.applyThemeWithoutWasm(theme);\n    }\n  }\n\n  /**\n   * Dispatch theme changed event\n   */\n  private dispatchThemeChangedEvent(theme: ThemeScheme): void {\n    try {\n      window.dispatchEvent(\n        new CustomEvent('themeChanged', {\n          detail: { theme },\n        })\n      );\n    } catch (error) {\n      console.error('Failed to dispatch theme changed event:', error);\n    }\n  }\n\n  /**\n   * Get current theme\n   */\n  public getCurrentTheme(): ThemeScheme {\n    return this.currentTheme;\n  }\n\n  /**\n   * Toggle between light and dark themes\n   */\n  public toggleTheme(): void {\n    const currentTheme = this.getCurrentTheme();\n    const newTheme: ThemeScheme = currentTheme === 'light' ? 'dark' : 'light';\n    this.setTheme(newTheme);\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ThemeManager","constructor","wasmModule","this","config","rootAttribute","localStorageKey","defaultScheme","mediaQuery","window","matchMedia","currentTheme","getStoredTheme","init","savedTheme","setThemeInWasm","applyTheme","setupSystemPreferenceListener","setupThemeToggleListeners","error","console","applyThemeWithoutWasm","theme","rootElement","document","documentElement","effectiveTheme","getSystemPreference","setAttribute","localStorage","getItem","themeValue","getThemeValue","setTheme","THEME_LIGHT","THEME_DARK","THEME_AUTO","matches","systemPrefersDark","resolvedTheme","resolveTheme","dispatchThemeChangedEvent","addEventListener","querySelectorAll","forEach","toggle","e","preventDefault","targetTheme","getAttribute","setItem","dispatchEvent","CustomEvent","detail","getCurrentTheme","toggleTheme","newTheme"],"sourceRoot":""}
