# Greenova Merge Instructions - Comprehensive Strategy

## Reference Project Standards and Prompts

Before starting any merge or conflict resolution, review the following project standards and prompt files for required conventions and best practices:

- `.github/instructions/.copilot-commit-message-instructions.md`: Commit message guidelines
- `.github/instructions/.copilot-pull-request-description-instructions.md`: Pull request description template
- `.github/instructions/.copilot-review-instructions.md`: Code review checklist
- `.github/prompts/code-style.prompt.md`: Code style and formatting standards
- `.github/prompts/merge-strategy.prompt.md`: Merge conflict resolution strategies
- `.github/prompts/pre-commit-fix.prompt.md`: Pre-commit and code quality enforcement
- `.github/prompts/configuration.prompt.md`: Toolchain and configuration standards

**Always ensure your workflow, commit messages, PRs, and code changes comply with these documents.**

---

## 1. Repository Health Check and Preparation

### Pre-Merge Analysis

```bash
# Create a detailed comparison report
mkdir -p logs
git fetch --all --tags

# Repository status and commit history comparison
git status > logs/repo_status.log
git log --graph --oneline --decorate upstream/main...origin/staging > logs/commit_history.log

# File differences between branches
git diff --name-status upstream/main origin/staging > logs/changed_files.log
git diff --stat upstream/main origin/staging > logs/diff_stats.log

# Conflict detection check
git checkout -b temp_analysis_branch upstream/main
git merge --no-commit --no-ff origin/staging &> logs/potential_conflicts.log || echo "Conflicts detected, see log"
git merge --abort
git checkout staging
git branch -D temp_analysis_branch

# Check common conflict areas
git diff upstream/main origin/staging -- greenova/company/models.py greenova/greenova/settings.py \
  greenova/authentication/urls.py greenova/greenova/urls.py > logs/critical_files_diff.log

# Review analysis logs before proceeding
cat logs/*.log > logs/upstream_merge_analysis.log
```

### Repository Optimization

```bash
# Perform repository optimization before major merges
git reflog expire --expire=now --all
git gc --prune=now --aggressive
git repack -Ad
git fsck
```

## 2. Changelog and Pre-Release Notes Preparation

Before merging, update your CHANGELOG.md and prepare pre-release notes for v0.0.6.

### Diff and Changelog Generation

```bash
# Fetch all tags and branches from upstream
git fetch upstream --tags
git fetch upstream

# Verify the v0.0.5 tag exists
git tag -l | grep v0.0.5

# If missing, fetch it explicitly
git fetch upstream tag v0.0.5

# Ensure integration/v0.0.6 exists locally
git branch -a | grep integration/v0.0.6
# If missing, fetch or create it:
# git fetch origin integration/v0.0.6:integration/v0.0.6

# Show all commits between v0.0.5 and integration/v0.0.6
git log v0.0.5..integration/v0.0.6 --oneline --graph --decorate > logs/commits_v0.0.5_to_v0.0.6.log

# Show all files changed
git diff --stat v0.0.5..integration/v0.0.6 > logs/diffstat_v0.0.5_to_v0.0.6.log

# Show the full diff
git diff v0.0.5..integration/v0.0.6 > logs/diff_v0.0.5_to_v0.0.6.diff

# Compare with upstream/main
git log upstream/main..integration/v0.0.6 --oneline --graph --decorate > logs/commits_main_to_v0.0.6.log
git diff v0.0.5..integration/v0.0.6 > logs/diff_v0.0.5_to_v0.0.6.diff

# List PR merge commits only
git log --merges v0.0.5..integration/v0.0.6 --oneline > logs/pr_merges_v0.0.5_to_v0.0.6.log

# Generate a GitHub-flavored Markdown changelog summary
# This will create logs/changelog-notes.md with a formatted summary of all commits
# and PR merges between v0.0.5 and integration/v0.0.6

echo "# Changelog for v0.0.6\n" > logs/changelog-notes.md
echo "## Commits between v0.0.5 and v0.0.6" >> logs/changelog-notes.md
echo '\n```' >> logs/changelog-notes.md
git log v0.0.5..integration/v0.0.6 --oneline >> logs/changelog-notes.md
echo '\n```' >> logs/changelog-notes.md
echo '\n## PR Merges between v0.0.5 and v0.0.6' >> logs/changelog-notes.md
echo '\n```' >> logs/changelog-notes.md
git log --merges v0.0.5..integration/v0.0.6 --oneline >> logs/changelog-notes.md
echo '\n```' >> logs/changelog-notes.md
```

## 3. Merge Strategy

### Phase 1: Preparation

```bash
# Ensure clean working state
git status
git stash    # if needed

# Update all remotes
git fetch --all --prune

# Create integration branch from a clean state
git checkout -b integration/v0.0.6 origin/staging
```

### Phase 1.5: Integrate cherry-picked updates first

```bash
# Create a test branch for conflict detection only
git checkout -b conflict-detection cherry-pick/selected-pr-updates
git merge origin/staging
# If conflicts are found, resolve them to understand what you'll face
# Then abort this merge and continue with your original plan
git merge --abort
git checkout staging
git branch -D conflict-detection

# Merge the cherry-pick/selected-pr-updates branch first as it contains foundational changes
git merge cherry-pick/selected-pr-updates
# Resolve any conflicts carefully - this is the most complex merge
git add .
git commit -m "feat(core): integrate foundational infrastructure improvements

- Update authentication templates
- Improve development environment configuration
- Update core templates and components
- Add infrastructure for CI/CD workflows

Resolves conflicts with cherry-pick/selected-pr-updates"

# TEST thoroughly after this merge before proceeding
python manage.py migrate
python manage.py test
make lint
# Manually verify key functionality works
```

### Phase 2: Safe PRs First (Sequential Order)

1. Merge PR #90 (Makefile updates):
```bash
gh pr checkout 90
git merge integration/v0.0.6
git add .
git commit -m "chore(build): update Makefile for improved build process"
gh pr merge 90 --squash --delete-branch
git checkout integration/v0.0.6
git merge --ff-only pr/Channing88/90
```

2. Merge PR #99 (Obligation List UI):
```bash
gh pr checkout 99
git merge integration/v0.0.6
# Note: May have conflicts if cherry-pick branch removed obligation_list.html
# If conflicts, prefer the cherry-pick branch structure and adapt PR #99 changes
git add .
git commit -m "feat(ui): implement interactive hyperlinks for status counts in procedure view

- Adapts changes to new structure from cherry-pick branch
- Preserves interactive HTMX functionality"
gh pr merge 99 --squash --delete-branch
git checkout integration/v0.0.6
git merge --ff-only pr/mhahmad0/99
```

3. Continue with PR #97 (User Profile):
```bash
gh pr checkout 97
git merge integration/v0.0.6
git add .
git commit -m "feat(users): streamline user profile management and improve UI"
gh pr merge 97 --squash --delete-branch
git checkout integration/v0.0.6
git merge --ff-only pr/JaredStanbrook/97
```

4. Continue with PR #104 (Environment Variables):
```bash
gh pr checkout 104
git merge integration/v0.0.6
git add .
git commit -m "chore(env): update environment configuration for improved security"
gh pr merge 104 --squash --delete-branch
git checkout integration/v0.0.6
git merge --ff-only dotenv-vault
```

### Phase 3: Complex PRs (Sequential Order)

1. PR #131 (Authentication):
```bash
gh pr checkout 131
git merge integration/v0.0.6
# Resolve conflicts in:
# - greenova/authentication/urls.py
# - greenova/greenova/settings.py
# - greenova/greenova/urls.py
git add .
git commit -m "feat(auth): implement proper authentication namespaces and fix login redirects

- Define namespace 'authentication' in urls.py
- Update LOGIN_URL in settings.py to use namespace
- Fixes test_company_create_requires_login"
gh pr merge 131 --squash --delete-branch
git checkout integration/v0.0.6
git merge --ff-only mhahmad0/issue72

# Verify authentication flow
python manage.py test authentication
python manage.py test company.test_company
```

2. PR #102 (Company Management):
```bash
gh pr checkout 102
git merge integration/v0.0.6
# Major conflicts likely if cherry-pick branch deleted middleware.py
# Resolve conflicts, preserving both:
# - Company model structure from PR #102
# - Improvements from cherry-pick branch
git add .
git commit -m "feat(company): implement company management module

- Add Company and UserCompany models with proper relationships
- Update middleware for company context
- Implement view mixins for company-scoped access control
- Fix conflict issues with cherry-pick branch"
gh pr merge 102 --squash --delete-branch
git checkout integration/v0.0.6
git merge --ff-only mhahmad0/issue87

# Test database migrations and company functionality
python manage.py makemigrations --check
python manage.py test company
```

3. PR #128 (Import Obligations):
```bash
gh pr checkout 128
git merge integration/v0.0.6
# Resolve conflicts in task and import files
git add .
git commit -m "fix(obligations): improve obligation import functionality

- Update CSV import logic
- Fix constraints handling
- Improve error reporting during import"
gh pr merge 128 --squash --delete-branch
git checkout integration/v0.0.6
git merge --ff-only fix/import_obligations

# Test import functionality
python manage.py import_obligations --dry-run
```

4. PR #103 (Dev Environment):
```bash
gh pr checkout 103
git merge integration/v0.0.6
# Resolve conflicts in environment files
git add .
git commit -m "feat(dev): update development environment configuration

- Add IPython integration
- Update bash aliases for improved workflow
- Configure pythonstartup for better development experience"
gh pr merge 103 --squash --delete-branch
git checkout integration/v0.0.6
git merge --ff-only ipython-integration

# Verify development environment
. .env
```

5. PR #145 (Auditing Module):
```bash
# Only merge if all previous PRs integrated successfully
gh pr checkout 145
git merge integration/v0.0.6
git add .
git commit -m "feat(audit): add auditing module for compliance and non-conformance tracking

- Extract compliance and non-conformance comments to dedicated models
- Add admin interface for audit management
- Implement history tracking for key operations"
gh pr merge 145 --squash --delete-branch
git checkout integration/v0.0.6
git merge --ff-only feature/issue53

# Verify migrations and auditing functionality
python manage.py test auditing
```

## 4. Merge integration/v0.0.6 into staging

```bash
git checkout staging
git pull origin staging
git merge integration/v0.0.6
# Resolve any conflicts if prompted
git push origin staging
```

## 5. Merge staging into upstream main

If you have write access to the upstream repo:

```bash
git checkout main
git pull upstream main
git merge staging
# Resolve any conflicts if prompted
git push upstream main
```

If you do NOT have direct write access, push to your fork and open a pull request:

```bash
git push origin main
# Then open a PR from your fork's main to upstream/main
```

## 6. Tag the new pre-release v0.0.6

From your main branch (after merging):

```bash
git checkout main
git pull upstream main
git tag -a v0.0.6 -m "Pre-release v0.0.6"
git push upstream v0.0.6
```

If you use GitHub’s Releases feature, go to the Releases page and:

- Click Draft a new release
- Set Tag version to v0.0.6
- Target main branch
- Mark as pre-release
- Add release notes if needed, then publish

- **Ensure all commit messages, PR descriptions, and code changes follow the standards in the referenced prompt and instruction files.**
- **Run pre-commit and code quality checks as described in `.github/prompts/pre-commit-fix.prompt.md` before finalizing.**
- **Use the code review checklist in `.github/instructions/.copilot-review-instructions.md` for final review.**

## 7. Comprehensive Testing Protocol

After each merge and after all merges:

1. Verify database integrity:
```bash
python manage.py makemigrations --check
python manage.py migrate --plan
python manage.py showmigrations
```

2. Run comprehensive test suite:
```bash
python manage.py test
```

3. Check code quality:
```bash
make lint
python -m mypy greenova
```

4. Verify core functionality paths:
```bash
# Create test script to exercise key application functionality
cat > test_core_functionality.py << EOF
import os
import django
import sys

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "greenova.settings")
django.setup()

from django.contrib.auth import get_user_model
from company.models import Company
from obligations.models import Obligation

# Test user authentication
User = get_user_model()
assert User.objects.filter(is_staff=True).exists(), "No admin users found"

# Test company functionality
assert Company.objects.count() > 0, "No companies found"

# Test obligations
assert Obligation.objects.count() > 0, "No obligations found"

print("Core functionality verified successfully")
EOF

python test_core_functionality.py
```

## 8. Final Verification and Release

- Ensure the v0.0.6 tag appears in GitHub under Tags/Releases.
- Confirm main branch and staging both contain the latest changes from integration/v0.0.6.
- Update version numbers in relevant files.
- Update CHANGELOG.md with all included changes.
- Tag the release in the production repository if not already done:

```bash
git tag -a v0.0.6 -m "Release v0.0.6 - May 2025 Update"
git push upstream v0.0.6
```

- **Ensure all commit messages, PR descriptions, and code changes follow the standards in the referenced prompt and instruction files.**
- **Run pre-commit and code quality checks as described in `.github/prompts/pre-commit-fix.prompt.md` before finalizing.**
- **Use the code review checklist in `.github/instructions/.copilot-review-instructions.md` for final review.**

## 9. Post-Integration Maintenance

After successful upstream integration:

```bash
# Update local main
git checkout main
git pull upstream main
git push origin main

# Clean up branches
git branch -D integration/v0.0.6 production-merge-2025-05
git remote prune origin

# Optimize repository
git gc --aggressive
git prune

# Run final database integrity check
python manage.py dbshell
# Run: PRAGMA integrity_check;
```

## 10. Conflict Resolution Guidelines

### Cherry-Pick Branch Conflicts

1. Authentication Templates:
   - The cherry-pick branch modifies numerous authentication templates
   - Keep template structure from cherry-pick branch when conflicts occur
   - Ensure custom functionality from PRs is integrated into the new template structure

2. Company Module:
   - Cherry-pick branch deletes company/middleware.py but PR #102 adds it
   - If cherry-pick removed it for a reason, consider refactoring PR #102 to work without it
   - Review company model changes carefully to ensure compatibility:
     ```python
     # Example resolution approach for company/models.py
     from company.models import Company

     class Company(models.Model):
         # Fields from cherry-pick branch
         name = models.CharField(max_length=255)
         slug = models.SlugField(unique=True)

         # Fields from PR #102
         logo = models.ImageField(upload_to='company_logos', blank=True)
         address = models.TextField(blank=True)

         # Methods from both sources combined
         def get_absolute_url(self):
             return reverse('company:detail', kwargs={'slug': self.slug})
     ```

3. Obligation Templates:
   - Cherry-pick branch removes obligation_list.html which PR #99 modifies
   - Determine if functionality was moved elsewhere and adapt PR #99 changes accordingly
   - Example adaptation:
     ```
     # If cherry-pick moved functionality to a component-based approach:
     # 1. Find the new component location
     # 2. Transfer the relevant HTMX attributes and event handlers
     # 3. Update selectors and target ids as needed
     ```

4. Development Environment:
   - Favor cherry-pick branch configuration for .devcontainer setup
   - Preserve PR #103 aliases and custom development tools
   - Merge requirements.txt carefully to avoid version conflicts:
     ```
     # Resolve by taking the higher version when conflicts occur
     # Unless a specific version is required for compatibility
     ```

### Authentication (PR #131)

1. URLs and Settings:
   - Ensure `app_name = 'authentication'` is set in authentication/urls.py
   - Check that `LOGIN_URL = 'authentication:login'` is properly set in settings.py
   - Verify login redirect behavior with test cases

### Company Management (PR #102)

1. Models and Database:
   - Check cascade behavior on foreign key relationships
   - Ensure company-obligation relationship is properly defined
   - Verify middleware context handling respects user permissions

### Import Obligations (PR #128)

1. Data Import Logic:
   - Preserve error handling improvements
   - Maintain transaction integrity
   - Keep progress reporting functionality

## 11. Alternative Strategies

If the recommended order causes issues:

1. Reverse-Order Strategy:
```bash
# Start from lowest-risk PR and progress to higher-risk ones
# This is less optimal but may help isolate conflict sources
```

2. Bundle Strategy:
```bash
# Group related PRs and merge them together
# Example: merge all UI-related PRs in one step
```

3. Cherry-pick Strategy:
```bash
# Instead of merging entire PRs, cherry-pick specific commits
git log pr/mhahmad0/102 --oneline
git cherry-pick <commit-hash>
```

---

**Note**: This plan is aligned with all project standards and prompt files. Always consult the referenced documentation for up-to-date requirements and best practices before and during merges.
