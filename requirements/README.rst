Greenova Python Requirements Management
=======================================

Structure
---------

- ``requirements.in``: Main application dependencies (unpinned, human-edited)
- ``requirements.txt``: Fully pinned, auto-generated by pip-compile from
  requirements.in
- ``requirements-dev.in``: Development dependencies (references requirements.in)
- ``requirements-dev.txt``: Fully pinned, auto-generated by pip-compile from
  requirements-dev.in
- ``requirements-prod.in``: Production-only dependencies (references
  requirements.in)
- ``requirements-prod.txt``: Fully pinned, auto-generated by pip-compile from
  requirements-prod.in
- ``constraints.txt``: All pinned versions for reproducibility (auto-generated,
  not hand-edited)

Workflow
--------

1. **Edit** ``requirements.in``, ``requirements-dev.in``, or ``requirements-prod.in``
   for new dependencies.
2. **Compile** with pip-tools::

     pip-compile requirements.in
     pip-compile requirements-dev.in
     pip-compile requirements-prod.in
     pip-compile --all-build-deps --all-extras --output-file=constraints.txt --strip-extras requirements.in

3. **Install** with pip-sync for reproducible environments::

     pip-sync requirements.txt requirements-dev.txt -c constraints.txt
     # or for production
     pip-sync requirements.txt requirements-prod.txt -c constraints.txt

4. **CI/CD and scripts** should always use the pinned ``.txt`` files and
   ``-c constraints.txt``.

Best Practices
--------------

- Never edit ``.txt`` files by handâ€”always use pip-compile.
- Always commit both ``.in`` and ``.txt`` files.
- Use ``constraints.txt`` for maximum reproducibility.
- See https://github.com/jazzband/pip-tools/ and
  https://luminousmen.com/post/pip-constraints-files for more info.
